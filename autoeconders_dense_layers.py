# -*- coding: utf-8 -*-
"""autoeconders

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rE60SGsseINelwimSxr0fOW0UAJwZqZd
"""

# Building an autoencoder using a dense neural network
# Importing the dependancies
from keras.layers import Dense, Input, LeakyReLU, Reshape
from keras.models import Model
from keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt

# Building the model
latent_vector_dimension = 32
# Building the encoder
input_layer = Input(shape = (784,))
dense_layer_1 = Dense(512)(input_layer)
activation_layer_1 = LeakyReLU()(dense_layer_1)

dense_layer_2 = Dense(256)(activation_layer_1)
activation_layer_2 = LeakyReLU()(dense_layer_2)

dense_layer_3= Dense(128)(activation_layer_2)
activation_layer_3 = LeakyReLU()(dense_layer_3)

dense_layer_4 = Dense(64)(activation_layer_3)
activation_layer_4 = LeakyReLU()(dense_layer_4)

dense_layer_5 = Dense(32)(activation_layer_4) 
activation_layer_5 = LeakyReLU()(dense_layer_5) # Encoding layer

# Building the decoder
dense_layer_6 = Dense(64)(activation_layer_5) 
activation_layer_6 = LeakyReLU()(dense_layer_6)

dense_layer_7 = Dense(128)(activation_layer_6)
activation_layer_7 = LeakyReLU()(dense_layer_7)

dense_layer_8 = Dense(256)(activation_layer_7)
activation_layer_8 = LeakyReLU()(dense_layer_8)

dense_layer_9 = Dense(512)(activation_layer_8)
activation_layer_9 = LeakyReLU()(dense_layer_9)

dense_layer_10 = Dense(784, activation = 'sigmoid')(activation_layer_9)
#output_layer = Reshape((28,28))(dense_layer_9)

# Compiling the model
autoencoder = Model(input_layer, dense_layer_10)
autoencoder.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = "accuracy")

# Preprocessing the data
(x_train,_),(x_test,_) = mnist.load_data()
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
x_train = np.reshape(x_train,(len(x_train),784) )
x_test = np.reshape(x_test,(len(x_test),784) )

# Training the model
autoencoder.fit(x_train, x_train, epochs = 50, batch_size = 16)

# Making predictions
decoded_imgs = autoencoder.predict(x_test)

# PLotting the output
num_of_images = 10
plt.figure(figsize = (20,4))
for i in range(n):
  #display the original picture
  plot = plt.subplot(2, n, i + 1)
  plt.imshow(x_test[i].reshape((28,28)))
  plot.get_xaxis().set_visible(False) # Hide x axis
  plot.get_yaxis().set_visible(False) # Hide y axis

  # display the predicted images
  plot = plt.subplot(2, n, i + n +1)
  plt.imshow(decoded_imgs[i].reshape((28,28)))
  plot.get_xaxis().set_visible(False) # Hide x axis
  plot.get_yaxis().set_visible(False) # Hide y axis
plt.show()

